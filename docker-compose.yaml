services:
  postgres:
    image: postgres:17.2
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5435:5435"
    networks:
      - airflow-spark-network

  postgres-dwh:
    image: postgres:17.2
    environment:
      POSTGRES_USER: dwh_user
      POSTGRES_PASSWORD: dwh_password
      POSTGRES_DB: dwh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dwh_user"]
      interval: 5s
      retries: 5
    restart: always
    volumes:
      - postgres-dwh-volume:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - airflow-spark-network

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    ports:
      - "6379:6379"
    networks:
      - airflow-spark-network

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - postgres
      - redis
      - spark-master
    env_file:
      - ./config/airflow.env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    ports:
      - "8080:8080"
    command: >
      bash -c "pip install -r requirements.txt && airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - airflow-spark-network

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - airflow-webserver
    env_file:
      - ./config/airflow.env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    command: >
      bash -c "pip install -r requirements.txt && airflow scheduler"
    restart: always
    networks:
      - airflow-spark-network

  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - airflow-scheduler
    env_file:
      - ./config/airflow.env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    command: >
      bash -c "pip install -r requirements.txt && airflow celery worker"
    restart: always
    networks:
      - airflow-spark-network

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - postgres
    env_file:
      - ./config/airflow.env
    environment:
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
    volumes:
      - ./requirements.txt:/opt/airflow/requirements.txt
    command: >
      bash -c "pip install -r requirements.txt && airflow version"
    restart: always
    networks:
      - airflow-spark-network

  spark-master:
    image: bitnami/spark:3.5.2
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IP=spark-master
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./data:/opt/airflow/data
    restart: always
    networks:
      - airflow-spark-network

  spark-worker:
    image: bitnami/spark:3.5.2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - ./data:/opt/airflow/data
    restart: always
    networks:
      - airflow-spark-network

volumes:
  postgres-db-volume:
  postgres-dwh-volume:

networks:
  airflow-spark-network:
    name: airflow-spark-network
    driver: bridge 